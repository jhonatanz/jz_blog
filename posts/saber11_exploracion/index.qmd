---
title: "Pruebas Saber 11, Almacenamiento de Datos"
author: "Jhonatan Zambrano"
date: "2025-05-23"
categories: [Bases de datos]
abstract: "Exploramos algunas soluciones de almacenamiento de información para nuestros datos. Discutimos algunos conceptos básicos sobre bases de datos y configuramos una base de datos para nuestros datos de las pruebas Saber 11."
image: "image.jpg"
lang: "es"
draft: true
---

![Caricatura generada con AI](csv_vs_bdr.png)

## Introducción

En la segunda entrega sobre el análisis de las pruebas saber 11 (te recomiendo leer el post anterior) vamos a pensar un poco en nuestras opciones para almacenar la data obtenida.

## Uso de los datos

La primera pregunta que nos podemos plantear es ¿que vamos a hacer con los datos? claro, yo sé, analizarlos, estudiarlos, quizá generar un modelo, etc. pero ¿como? ¿para qué?.

Todavía no sabes para donde vamos, calma. Planteemos las siguientes situaciones:

-   Estamos escribiendo un blog sobre ciencia de datos, el objetivo es ilustrar conceptos estadísticos y de aprendizaje automático. Todas las entradas del blog son textos explicativos que utilizar fragmentos o la totalidad de los datos.

-   Un cliente nos pide desarrollar un dashboard dinámico que le permita filtrar cierta información para mostrar unas gráficas estandarizadas y unos KPI (Key Performance Indicator). Dicho Dashboard será accedido por varias personas en su empresa.

Estas dos situaciones nos ofrecen una primera guía de hacia donde deberíamos movernos. En el primer caso, parece suficiente descargar nuestros datos en formato *.csv* y acceder y manipular los datos de forma local para luego publicar en el blog los resultados de nuestro análisis.

En el segundo caso, lo anterior no es suficiente, necesitamos un mecanismo para almacenar los datos de modo que puedan ser accedidos por varias personas al tiempo y, ademas, interactuar con los datos. Aquí necesitamos una base de datos.

```{r}
#| echo: false
perc <- paste0(round(100*3/8), "%")
```

Otro punto importante es la extension de los datos disponibles. Para el caso de los datos de las pruebas saber 11, tenemos un poco mas de 7 millones de registros, cada uno de ellos con 51 columnas. El archivo *.csv* es de unas 3 GB, cuando lo cargamos directamente en R usando por ejemplo `readr::read_csv` toda esa extension queda en la memoria RAM de nuestro computador, si tenemos 8 GB nos consumimos `r perc` de nuestra memoria RAM solo cargando el archivo.

Que pasa si, ademas, se require ir aumentando la cantidad de información que estamos usando en nuestro desarrollo? es decir, los usuarios van alimentando datos, los mismos que serán usados posteriormente por nuestro desarrollo. Posiblemente lo mas recomendado sea definir una estructura que permita la introducción de los datos de modo ordenado que pueda ser usado con facilidad posteriormente.

## Almacenamiento de Datos

En el anterior post, presentamos la descripción de las columnas de la tabla de los resultados de las pruebas saber 11. Allí observamos que, convenientemente, los nombres de las columnas tienen asociados prefijos que nos dan una pista sobre como agrupar los datos, por ejemplo, las columnas que contienen los datos del estudiante vienen precedidas del prefijo "ESTU".

Pensemos en el caso especifico de las siguientes dos columnas:

| Columna | Descripción |
| --- | --- |
| COLE_DEPTO_UBICACION | Departamento de la sede |
| COLE_MCPIO_UBICACION | Municipio de la sede |

En Colombia se tiene una división política en departamentos y municipios, los primeros son 32 extensiones grandes ademas del distrito capital. Los municipios son divisiones mas pequeñas de los departamentos y suman 1104.

Otras columnas asociadas a las anteriores serían:

| Columna | Descripción |
| --- | --- |
| COLE_COD_DEPTO_UBICACION | Código departamento de la sede |
| COLE_COD_MCPIO_UBICACION | Código municipio de la sede |

Para el caso de nuestro conjunto de datos, estas 4 columnas representan `r 4*7000000` datos, pero que pasaría si en lugar de tener esta 4 columnas en nuestra tabla, creamos una tabla con los 1104 municipios y sus respectivos departamentos? podríamos definir una clave a cada municipio que nos permita asociar los registro en la tabla principal a los registros de los municipios en nuestra nueva tabla, o aun mejor, usar el código municipio de la sede como clave. Veamos la diferencia en la cantidad de datos entre estas dos opciones:

| Datos de municipios caso 1 | Datos de municipios caso 2 |
| --- | --- |
| 4 x 7'000.000 = 28'000.000 | 4 x 1104 + 7'000.000 = 7'004.416 |

En el caso 2, tenemos un ahorro de casi 21 millones de datos almacenados. Si extendemos este procedimiento (crear tablas *secundarias* y relacionarlas con las otras) podemos replicar nuestra tabla original pero con una menor cantidad de datos almacenados.

Esta idea conduce a la definición de Base de Datos Relacionales y Normalización.

## ¿Por qué una Base de Datos Relacional? La Normalización al Rescate

Cuando nuestros datos crecen en volumen y complejidad, o cuando necesitamos que múltiples usuarios accedan y modifiquen la información de manera concurrente y segura, los archivos CSV empiezan a mostrar sus limitaciones. Es aquí donde entran en juego las bases de datos relacionales (BDR).

Una BDR organiza la información en tablas que se relacionan entre sí mediante llaves (claves primarias y foráneas). El lenguaje estándar para interactuar con estas bases de datos es SQL (Structured Query Language).

Una de las grandes ventajas de las BDR es la capacidad de normalizar los datos. ¿Qué es esto de la normalización? En términos sencillos, es un proceso de diseño que busca organizar los datos de manera eficiente para:

1. **Reducir la redundancia:** Evitar repetir la misma información en múltiples lugares. Por ejemplo, en lugar de escribir el nombre completo del departamento de residencia de cada estudiante en cada registro, almacenamos un código de departamento y tenemos una tabla separada donde ese código se asocia al nombre completo del departamento.

2. **Mejorar la integridad de los datos:** Asegurar que los datos sean consistentes y precisos. Si el nombre de un colegio cambia, solo necesitamos actualizarlo en un lugar (la tabla de colegios) en vez de buscar y reemplazar en millones de registros de estudiantes.

3. **Facilitar el mantenimiento y las consultas:** Una estructura bien organizada simplifica la actualización de datos y puede hacer que ciertas consultas sean más rápidas y eficientes.

Existen varios "niveles" de normalización (Forma Normal 1, 2, 3, etc.), pero el objetivo general es el mismo: datos bien estructurados. Para nuestro ejemplo, no buscaremos la perfección teórica, sino una estructura práctica que ilustre los beneficios.

## Diseñando Nuestra BDR para las Pruebas Saber 11

Para nuestro conjunto de datos de las pruebas Saber 11, que contiene información sobre estudiantes, colegios, ubicaciones y puntajes, podemos proponer una estructura normalizada con las siguientes tablas principales:

- **Departamentos:** Almacenará los códigos y nombres de los departamentos.
- **Municipios:** Contendrá los códigos y nombres de los municipios, vinculados a sus respectivos departamentos.
- **Colegios:** Información general sobre los establecimientos educativos.
- **Sedes:** Detalles de las sedes específicas de cada colegio, incluyendo su ubicación.
- **Estudiantes:** Información personal de cada estudiante que presenta el examen.
- **PresentacionesExamen:** Registrará los resultados de cada estudiante en un periodo específico, vinculando al estudiante, la sede donde se inscribió (si aplica) y el lugar de presentación. Esta será la tabla central para los puntajes.
- **InfoFamiliarEstudiante:** Detalles socioeconómicos y familiares del estudiante, vinculados a su registro de examen.